<?php


namespace App\Rest\Projects\Controller;


use App\Rest\Projects\Storage\ProjectActorsStorage;
use App\Rest\Run\RestControllerProto;
use Uuid\Uuid;

class Actors extends RestControllerProto
{
    private function storage()
    {
        return new ProjectActorsStorage();
    }
    
    public function get()
    {
        $limit = $this->p('limit', 18);
        
        $projectId = $this->p('p_id');
        $userId    = $this->p('u_id');
        $status    = $this->p('status');
        
        $filters = [];
        if ($projectId) {
            $filters[] = [ProjectActorsStorage::F_PROJECT_ID, '=', $projectId];
        }
        
        if ($userId) {
            $filters[] = [ProjectActorsStorage::F_USER_ID, '=', $userId];
        }
        
        if ($status) {
            $filters[] = [ProjectActorsStorage::F_STATUS, '=', $status];
        }
        
        if (empty($filters)) {
            throw new \Exception("Empty request", 404);
        }
        
        $result = $this->storage()->search()->find($filters, $limit, __METHOD__);
        
        return array_values($result);
    }
    
    public function post()
    {
        $curUserId = $this->_getCurrentUserId();
        if (!$curUserId) {
            throw new \Exception("Not authorised", 401);
        }
        
        $projectId = $this->p('p_id');
        $userId    = $this->p('u_id', $curUserId);
        $status    = $this->p('status', 0);
        
        $res = $this->storage()->search()->findOne([
            [ProjectActorsStorage::F_USER_ID, '=', $userId],
            [ProjectActorsStorage::F_PROJECT_ID, '=', $projectId],
        ], __METHOD__);
        
        if (!$res) {
            $res = $this->storage()->write()->insert(Uuid::v4(), [
                ProjectActorsStorage::ID              => Uuid::v4(),
                ProjectActorsStorage::F_USER_ID       => $userId,
                ProjectActorsStorage::F_PROJECT_ID    => $projectId,
                ProjectActorsStorage::F_INVITED_BY_ID => $curUserId,
                ProjectActorsStorage::F_STATUS        => $status,
                ProjectActorsStorage::F_ADDED         => time(),
            ], __METHOD__);
        }
        
        return $res;
    }
    
    public function put()
    {
        $this->post();
    }
    
    public function delete()
    {
        return parent::delete(); // TODO: Change the autogenerated stub
    }
    
}